// <auto-generated />
using System;
using EntityFrameworkCoreDemo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkCoreDemo.Migrations
{
    [DbContext(typeof(DemoDbContext))]
    [Migration("20230518085149_AddChangeTypeAndRelationship")]
    partial class AddChangeTypeAndRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityFrameworkCoreDemo.ChangeKeyType.GuidToStringEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("NewId");

                    b.ToTable("GuidToStringEntities");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ChangeKeyType.Number", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProviderId")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Numbers");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ChangeKeyType.NumberProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NumberProviders");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Concurrency.ConcurrencyEntity", b =>
                {
                    b.Property<string>("OccurDay")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Current")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("OccurDay");

                    b.ToTable("ConcurrencyEntities");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.LazyLoad.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.LazyLoad.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlogId1")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("BlogId1");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.Cascades.Parent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("parent", (string)null);
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.ScheduleParticipant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParticipantID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParticipantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleParticipant");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ValueConversions.People", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ValueObject.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ChangeKeyType.Number", b =>
                {
                    b.HasOne("EntityFrameworkCoreDemo.ChangeKeyType.NumberProvider", "Provider")
                        .WithMany("Numbers")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.LazyLoad.Post", b =>
                {
                    b.HasOne("EntityFrameworkCoreDemo.LazyLoad.Blog", null)
                        .WithMany("Posts")
                        .HasForeignKey("BlogId");

                    b.HasOne("EntityFrameworkCoreDemo.LazyLoad.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId1");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.Cascades.Parent", b =>
                {
                    b.OwnsMany("EntityFrameworkCoreDemo.Relational.Cascades.Child", "Children", b1 =>
                        {
                            b1.Property<string>("ParentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ParentId", "Id");

                            b1.ToTable("children", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ParentId");

                            b1.OwnsMany("EntityFrameworkCoreDemo.Relational.Cascades.Grand", "Grands", b2 =>
                                {
                                    b2.Property<string>("ChildParentId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("ChildId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"), 1L, 1);

                                    b2.Property<string>("Code")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ChildParentId", "ChildId", "Id");

                                    b2.ToTable("grand", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ChildParentId", "ChildId");
                                });

                            b1.Navigation("Grands");
                        });

                    b.Navigation("Children");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.ScheduleParticipant", b =>
                {
                    b.HasOne("EntityFrameworkCoreDemo.Relational.Schedule", "Schedule")
                        .WithMany("Participants")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ValueObject.Order", b =>
                {
                    b.OwnsOne("EntityFrameworkCoreDemo.ValueObject.Address", "Address", b1 =>
                        {
                            b1.Property<string>("OrderId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("County")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Detail")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("EntityFrameworkCoreDemo.ValueObject.OrderItem", "Items", b1 =>
                        {
                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("id"), 1L, 1);

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(18,4)");

                            b1.Property<string>("ProduceId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProduceName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("orderId")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("id");

                            b1.HasIndex("orderId");

                            b1.ToTable("OrderItem");

                            b1.WithOwner()
                                .HasForeignKey("orderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.ChangeKeyType.NumberProvider", b =>
                {
                    b.Navigation("Numbers");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.LazyLoad.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("EntityFrameworkCoreDemo.Relational.Schedule", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
